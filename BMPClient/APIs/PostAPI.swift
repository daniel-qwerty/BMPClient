//
// PostAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class PostAPI: APIBase {
    /**
     * enum for parameter deviceType
     */
    public enum DeviceType_freePostStore: String { 
        case ios = "ios"
        case android = "android"
    }

    /**
     Store Free Post with multiple photos
     
     - parameter description: (form) Post description 
     - parameter categoryId: (form) Post Category 
     - parameter deviceType: (form) Mobile device type 
     - parameter photos: (form) Post photos (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func freePostStore(description: String, categoryId: Int32, deviceType: DeviceType_freePostStore, photos: [Data]? = nil, completion: @escaping ((_ data: SuccessConfirmation?,_ error: Error?) -> Void)) {
        freePostStoreWithRequestBuilder(description: description, categoryId: categoryId, deviceType: deviceType, photos: photos).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Store Free Post with multiple photos
     - POST /free_posts
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter description: (form) Post description 
     - parameter categoryId: (form) Post Category 
     - parameter deviceType: (form) Mobile device type 
     - parameter photos: (form) Post photos (optional)

     - returns: RequestBuilder<SuccessConfirmation> 
     */
    open class func freePostStoreWithRequestBuilder(description: String, categoryId: Int32, deviceType: DeviceType_freePostStore, photos: [Data]? = nil) -> RequestBuilder<SuccessConfirmation> {
        let path = "/free_posts"
        let URLString = BPMClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "description": description,
            "category_id": categoryId.encodeToJSON(),
            "photos": photos,
            "device_type": deviceType.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessConfirmation>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     Get list of current authorized user Posts. Available includes: photos.
     
     - parameter page: (query) Page number for paginated data, 1-based (optional)
     - parameter limit: (query) Page size for paginated data (optional)
     - parameter include: (query) Comma-separated list of relations to include. For example: creator,references,items (optional)
     - parameter categoryId: (query) Id of Category. For example: 1 (optional)
     - parameter startDate: (query) Filter by start date, if this parameter isn&#39;t set, start date is first date of the current month (optional)
     - parameter endDate: (query) Filter by end date, if the start date isn&#39;t set, end date is the end date of the current month (optional)
     - parameter search: (query) Filter by keywords (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContestPosts(page: Int32? = nil, limit: Int32? = nil, include: String? = nil, categoryId: String? = nil, startDate: String? = nil, endDate: String? = nil, search: String? = nil, completion: @escaping ((_ data: PostList?,_ error: Error?) -> Void)) {
        getContestPostsWithRequestBuilder(page: page, limit: limit, include: include, categoryId: categoryId, startDate: startDate, endDate: endDate, search: search).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get list of current authorized user Posts. Available includes: photos.
     - GET /contest
     - API Key:
       - type: apiKey Authorization 
       - name: AuthToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "expired" : true,
    "category_id" : 5,
    "description" : "Some long Descriptin",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "voted" : true,
    "votes" : "",
    "id" : 5,
    "photos" : [ {
      "file_thumbnail_size" : 10241024,
      "file_url" : "https://s3-aws-region.amazonaws.com/assets/12/sample.png",
      "file" : "sample.png",
      "post_id" : 5,
      "file_original" : "some_name.png",
      "id" : 5,
      "file_thumbnail_url" : "https://s3-aws-region.amazonaws.com/assets/12/th_sample.png",
      "file_size" : 10241024,
      "file_thumbnail" : "th_sample.png"
    } ],
    "user" : {
      "free_post_count" : "",
      "avatar_file_url" : "https://s3-aws-region.amazonaws.com/avatar/12/sample.png",
      "gender" : 1,
      "city" : "Washington",
      "vote_limit" : "",
      "last_name" : "Darth",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "free_post_limit_per_month" : "",
      "zip_code" : "11622",
      "is_admin" : false,
      "id" : 5,
      "state" : "MS",
      "first_name" : "Vader",
      "vote_count" : "",
      "email" : "darth.vader@galaxy-imperia.gov"
    }
  } ],
  "meta" : {
    "pagination" : {
      "per_page" : "",
      "total" : "",
      "count" : "",
      "total_pages" : "",
      "current_page" : ""
    }
  }
}}]
     
     - parameter page: (query) Page number for paginated data, 1-based (optional)
     - parameter limit: (query) Page size for paginated data (optional)
     - parameter include: (query) Comma-separated list of relations to include. For example: creator,references,items (optional)
     - parameter categoryId: (query) Id of Category. For example: 1 (optional)
     - parameter startDate: (query) Filter by start date, if this parameter isn&#39;t set, start date is first date of the current month (optional)
     - parameter endDate: (query) Filter by end date, if the start date isn&#39;t set, end date is the end date of the current month (optional)
     - parameter search: (query) Filter by keywords (optional)

     - returns: RequestBuilder<PostList> 
     */
    open class func getContestPostsWithRequestBuilder(page: Int32? = nil, limit: Int32? = nil, include: String? = nil, categoryId: String? = nil, startDate: String? = nil, endDate: String? = nil, search: String? = nil) -> RequestBuilder<PostList> {
        let path = "/contest"
        let URLString = BPMClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "include": include,
            "category_id": categoryId,
            "start_date": startDate,
            "end_date": endDate,
            "search": search
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PostList>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     Get list of current authorized user Posts. Available includes: photos.
     
     - parameter page: (query) Page number for paginated data, 1-based (optional)
     - parameter limit: (query) Page size for paginated data (optional)
     - parameter include: (query) Comma-separated list of relations to include. For example: creator,references,items (optional)
     - parameter categoryId: (query) Id of Category. For example: 1 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentUserPosts(page: Int32? = nil, limit: Int32? = nil, include: String? = nil, categoryId: String? = nil, completion: @escaping ((_ data: PostList?,_ error: Error?) -> Void)) {
        getCurrentUserPostsWithRequestBuilder(page: page, limit: limit, include: include, categoryId: categoryId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get list of current authorized user Posts. Available includes: photos.
     - GET /posts
     - API Key:
       - type: apiKey Authorization 
       - name: AuthToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "expired" : true,
    "category_id" : 5,
    "description" : "Some long Descriptin",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "voted" : true,
    "votes" : "",
    "id" : 5,
    "photos" : [ {
      "file_thumbnail_size" : 10241024,
      "file_url" : "https://s3-aws-region.amazonaws.com/assets/12/sample.png",
      "file" : "sample.png",
      "post_id" : 5,
      "file_original" : "some_name.png",
      "id" : 5,
      "file_thumbnail_url" : "https://s3-aws-region.amazonaws.com/assets/12/th_sample.png",
      "file_size" : 10241024,
      "file_thumbnail" : "th_sample.png"
    } ],
    "user" : {
      "free_post_count" : "",
      "avatar_file_url" : "https://s3-aws-region.amazonaws.com/avatar/12/sample.png",
      "gender" : 1,
      "city" : "Washington",
      "vote_limit" : "",
      "last_name" : "Darth",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "free_post_limit_per_month" : "",
      "zip_code" : "11622",
      "is_admin" : false,
      "id" : 5,
      "state" : "MS",
      "first_name" : "Vader",
      "vote_count" : "",
      "email" : "darth.vader@galaxy-imperia.gov"
    }
  } ],
  "meta" : {
    "pagination" : {
      "per_page" : "",
      "total" : "",
      "count" : "",
      "total_pages" : "",
      "current_page" : ""
    }
  }
}}]
     
     - parameter page: (query) Page number for paginated data, 1-based (optional)
     - parameter limit: (query) Page size for paginated data (optional)
     - parameter include: (query) Comma-separated list of relations to include. For example: creator,references,items (optional)
     - parameter categoryId: (query) Id of Category. For example: 1 (optional)

     - returns: RequestBuilder<PostList> 
     */
    open class func getCurrentUserPostsWithRequestBuilder(page: Int32? = nil, limit: Int32? = nil, include: String? = nil, categoryId: String? = nil) -> RequestBuilder<PostList> {
        let path = "/posts"
        let URLString = BPMClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "include": include,
            "category_id": categoryId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PostList>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter deviceType
     */
    public enum DeviceType_postStore: String { 
        case ios = "ios"
        case android = "android"
    }

    /**
     Store Post with multiple photos
     
     - parameter description: (form) Post description 
     - parameter categoryId: (form) Post Category 
     - parameter receiptData: (form) In-app purchare receipt 
     - parameter deviceType: (form) Mobile device type 
     - parameter photos: (form) Post photos (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postStore(description: String, categoryId: Int32, receiptData: String, deviceType: DeviceType_postStore, photos: [Data]? = nil, completion: @escaping ((_ data: SuccessConfirmation?,_ error: Error?) -> Void)) {
        postStoreWithRequestBuilder(description: description, categoryId: categoryId, receiptData: receiptData, deviceType: deviceType, photos: photos).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Store Post with multiple photos
     - POST /posts
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter description: (form) Post description 
     - parameter categoryId: (form) Post Category 
     - parameter receiptData: (form) In-app purchare receipt 
     - parameter deviceType: (form) Mobile device type 
     - parameter photos: (form) Post photos (optional)

     - returns: RequestBuilder<SuccessConfirmation> 
     */
    open class func postStoreWithRequestBuilder(description: String, categoryId: Int32, receiptData: String, deviceType: DeviceType_postStore, photos: [Data]? = nil) -> RequestBuilder<SuccessConfirmation> {
        let path = "/posts"
        let URLString = BPMClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "description": description,
            "category_id": categoryId.encodeToJSON(),
            "photos": photos,
            "receipt_data": receiptData,
            "device_type": deviceType.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessConfirmation>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

}
