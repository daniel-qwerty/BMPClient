//
// AuthenticationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class AuthenticationAPI: APIBase {
    /**
     Login existing user, returns access token
     
     - parameter authRequest: (body) Authentication Data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(authRequest: AuthRequest, completion: @escaping ((_ data: AuthToken?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(authRequest: authRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Login existing user, returns access token
     - POST /auth
     - examples: [{contentType=application/json, example={
  "token" : "sWwcCYh53pZ9MAB...URvEzLsVP5rpsds"
}}]
     
     - parameter authRequest: (body) Authentication Data 

     - returns: RequestBuilder<AuthToken> 
     */
    open class func loginWithRequestBuilder(authRequest: AuthRequest) -> RequestBuilder<AuthToken> {
        let path = "/auth"
        let URLString = BPMClientAPI.basePath + path
        let parameters = authRequest.encodeToJSON() as? [String:AnyObject]
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AuthToken>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     Logout, makes authentication token invalid
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logout(completion: @escaping ((_ data: LogoutInfo?,_ error: Error?) -> Void)) {
        logoutWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Logout, makes authentication token invalid
     - DELETE /auth
     - API Key:
       - type: apiKey Authorization 
       - name: AuthToken
     - examples: [{contentType=application/json, example={
  "userId" : 5
}}]

     - returns: RequestBuilder<LogoutInfo> 
     */
    open class func logoutWithRequestBuilder() -> RequestBuilder<LogoutInfo> {
        let path = "/auth"
        let URLString = BPMClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<LogoutInfo>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     Refresh the token and and return new authentication token
     
     - parameter refreshToken: (body) Last authentication token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refreshToken(refreshToken: RefreshToken, completion: @escaping ((_ data: AuthToken?,_ error: Error?) -> Void)) {
        refreshTokenWithRequestBuilder(refreshToken: refreshToken).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Refresh the token and and return new authentication token
     - PUT /auth
     - examples: [{contentType=application/json, example={
  "token" : "sWwcCYh53pZ9MAB...URvEzLsVP5rpsds"
}}]
     
     - parameter refreshToken: (body) Last authentication token 

     - returns: RequestBuilder<AuthToken> 
     */
    open class func refreshTokenWithRequestBuilder(refreshToken: RefreshToken) -> RequestBuilder<AuthToken> {
        let path = "/auth"
        let URLString = BPMClientAPI.basePath + path
        let parameters = refreshToken.encodeToJSON() as? [String:AnyObject]
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AuthToken>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     Request password reset, when forgotten
     
     - parameter resetPasswordRequest: (body) Authentication Data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPasswordRequest(resetPasswordRequest: ResetPasswordRequest, completion: @escaping ((_ data: SuccessConfirmation?,_ error: Error?) -> Void)) {
        resetPasswordRequestWithRequestBuilder(resetPasswordRequest: resetPasswordRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Request password reset, when forgotten
     - POST /auth/password/reset
     - examples: [{contentType=application/json, example={
  "message" : "aeiou"
}}]
     
     - parameter resetPasswordRequest: (body) Authentication Data 

     - returns: RequestBuilder<SuccessConfirmation> 
     */
    open class func resetPasswordRequestWithRequestBuilder(resetPasswordRequest: ResetPasswordRequest) -> RequestBuilder<SuccessConfirmation> {
        let path = "/auth/password/reset"
        let URLString = BPMClientAPI.basePath + path
        let parameters = resetPasswordRequest.encodeToJSON() as? [String:AnyObject]
 
        //let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessConfirmation>.Type = BPMClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

}
